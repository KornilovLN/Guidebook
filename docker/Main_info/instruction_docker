#---------------------------------------------------------
#--- Instruction docker: Предполагает работу в shell
#---------------------------------------------------------

#--- Предположим, надо создать автономную от ОС программу
#--- понадобится рабочая директория ~/{path}/prj1

#--- создаю рабочую директорию проекта и захожу в нее
№--- Тут будут файлы проекта (prg.py,...) и Dockerfile
$ mkdir ~/work/docker/prj1
$ cd ~/work/docker/prj1

#--- тут будут логи работы проекта 
$ mkdir ~/work/docker/prj1/logs

#--- скачиваю последнюю версию ubuntu докером !!!
#--- Опционально для случая, когда python:3.8 не использ.
#--- $ docker pull ubuntu
#--- а надо просто поработать через bash в ubuntu !!!

#--- пишу рабочую программу для докера и сохраняю в этой
#--- директории под именем prg.py

#--- создаю Dockerfile с инструкциями для сборки ту же

```
#--- Dockerfile ---------------------------------
# официальный образ Python как базовый
FROM python:3.8

#--- Уст. авторство
LABEL maintainer ln.Kornilovstar@gmail.com

#--- Если работаем с кодом из GitHub:
#--- Клонировать код из GitHub если надо
# RUN git clone -q https://github.com/docker-in-practice/todo.git
#--- Перейти в директорию клонированного кода
# WORKDIR todo

#--- Иначе, указываем рабочую директорию, где находимся
# Уст. рабочую директорию в контейнере
WORKDIR /home

# Создать дир. логов, если надо: /home/logs
RUN mkdir logs

# Скопировать файлы prg.py,... в рабочую директорию
COPY prg.py .

# Запустить prg.py при запуске контейнера
CMD [ "python", "./prg.py" ]
#------------------------------------------------
```

#--- создаю image для своего контейнера img_prg
$ docker build -t img_prg . 

#--- запускаю контейнер cont_prg с образом img_prg
$ docker run -d --name cont_prg img_prg

#--- слежу за логами работы prg.py в консоли 
$ docker logs cont_prg



#--- Для остановки контейнера использовать команду
$ docker stop cont_prg

#--- Для перезапуска контейнера
$ docker start cont_prg

#--- для подключения к контейнеру через bash
$ docker exec -it cont_prg /bin/bash

#--- для подробного просмотра контейнера
$ docker inspect cont_prg



#--- Сохранить образ в файл для отправки:
$ docker save -o img_prg.tar img_prg

#--- Сжать файл, если большой слишком, в img_prg.tar.gz 
$ gzip img_prg.tar

#--- После получения не сжатого или сжатого файла:
$ docker load -i img_prg.tar
#--- или:
$ gunzip -c img_prg.tar.gz | docker load

#--- после этого файл можно запускать докером получателя
$ docker run -d --name cont_prg img_prg 

#---и наблюдать за логами
$ docker logs cont_prg
