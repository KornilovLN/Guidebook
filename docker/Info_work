
1. Сохраните текущее состояние контейнера в новый образ Docker с помощью команды docker commit. Это позволит вам создать образ со всеми изменениями, которые вы сделали в контейнере:

docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]

Замените CONTAINER на имя или ID вашего контейнера, а REPOSITORY[:TAG] на имя репозитория и тег для нового образа.

2. Остановите контейнер с помощью команды docker stop:

docker stop CONTAINER

Замените CONTAINER на имя или ID вашего контейнера.

3. Теперь, когда у вас есть образ с вашими изменениями, вы можете использовать Dockerfile, чтобы определить, как ваш контейнер должен быть запущен с вашим скриптом test.py. Если вы уже создали Dockerfile, как я описал ранее, вы можете собрать образ и запустить контейнер с помощью команд docker build и docker run.




Чтобы узнать, какой контейнер с запущенным образом работает в данный момент, вы можете использовать команду docker ps. Эта команда покажет список всех запущенных контейнеров, их ID, имена, используемые образы и другую полезную информацию. Вот как это делается:

docker ps

Вы увидите список запущенных контейнеров с информацией о каждом из них. Ищите столбец "NAMES" или "CONTAINER ID", чтобы определить контейнер, который вы запустили.

Если вы хотите увидеть все контейнеры, включая остановленные, используйте команду:

docker ps -a




1. Сохраните текущее состояние контейнера в новый образ Docker с помощью команды docker commit:

docker commit [CONTAINER_ID] [REPOSITORY_NAME]:[TAG]

Замените [CONTAINER_ID] на ID вашего контейнера, [REPOSITORY_NAME] на имя, которое вы хотите дать вашему образу, и [TAG] на тег, например latest.

2. Остановите работающий контейнер с помощью команды docker stop:

docker stop [CONTAINER_ID]



Чтобы запустить контейнер с определенным образом, который уже был создан и остановлен, вы можете использовать команду docker start с именем или ID контейнера. В вашем случае, если вы хотите запустить контейнер с ID 73e1ffc951dd, команда будет выглядеть следующим образом:

  docker start 73e1ffc951dd

Это запустит остановленный контейнер 73e1ffc951dd. Если вы хотите войти в контейнер после его запуска, вы можете использовать команду docker exec с флагом -it для интерактивного терминала:

  docker exec -it 73e1ffc951dd /bin/bash



Использование директивы WORKDIR /home в Dockerfile корректно. Эта инструкция устанавливает рабочую директорию внутри вашего Docker контейнера на /home. Это означает, что все последующие команды RUN, CMD, ENTRYPOINT, COPY и ADD будут выполняться относительно этой директории.

Если вы хотите, чтобы ваш скрипт test.py был расположен в директории /home внутри контейнера, то ваш Dockerfile должен выглядеть так:

#-------------------------------------------------
#--- Этот файл называется Dockerfile
#--- В нем заданы команды для сборки 
#--- При этом файл test.py и Dockerfile
#--- должны быть в одной директории хоста, откуда
#--- будет дана команда сборки:
#--- $ docker build -t elegant_jemison:latest .

# Используйте официальный образ Python как базовый
FROM python:3.8

# Установите рабочую директорию в контейнере
WORKDIR /home

# Скопируйте файл test.py в рабочую директорию
COPY test.py .

# Запустите test.py при запуске контейнера
CMD ["python", "./test.py"]
#-------------------------------------------------

После этого, когда вы соберете образ и запустите контейнер, ваш скрипт test.py будет выполнен.
Убедитесь, что файл test.py находится в той же директории на вашем локальном компьютере,
где расположен Dockerfile, перед тем как выполнять команду docker build. 


  $ docker build -t elegant_jemison:latest .

Отлично, вы использовали команду docker build с тегом latest для создания образа с именем elegant_jemison. Теперь, чтобы запустить контейнер из этого образа, используйте следующую команду:

docker run -d --name my-container-name elegant_jemison:latest

Замените my-container-name на любое имя, которое вы хотите присвоить вашему новому контейнеру. Это имя будет использоваться для идентификации контейнера в системе Docker.

Если вы хотите, чтобы контейнер запускался автоматически при старте системы, добавьте флаг --restart always:

docker run -d --name my-container-name --restart always elegant_jemison:latest

Это гарантирует, что ваш контейнер будет перезапускаться автоматически после перезагрузки системы или если контейнер выйдет из строя.



  $ docker run -d --name my-container-test_py elegant_jemison:latest
7c054f0326d78a95a8b42dc24f8c6721a4b25a27f0ab8f5f207f7a3d5c3813db

Команда docker run успешно создала и запустила контейнер в фоновом режиме (-d означает "detached mode"). Строка, которую вы видите, это ID запущенного контейнера.

Чтобы увидеть вывод вашего скрипта test.py, который выполняется в контейнере, вы можете использовать команду docker logs. Вот как это сделать:

docker logs my-container-test_py

Эта команда покажет стандартный вывод (stdout) и стандартный поток ошибок (stderr) вашего контейнера. Если ваш скрипт test.py выводит что-либо в консоль, вы увидите это здесь.

Если вы ожидаете, что скрипт будет продолжать выводить данные в реальном времени, вы можете следить за логами контейнера в реальном времени с помощью флага -f:

docker logs -f my-container-test_py
