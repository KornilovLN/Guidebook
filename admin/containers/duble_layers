Для того, чтобы создать контейнеры непосредственно в каталоге назначения
на виртуальной машине VM1 и при этом обеспечить использование общих слоев образов,
вам необходимо выполнить следующие шаги:

1 Создание образа на хост-машине:
  Как вы уже делаете, создайте базовый образ Docker на вашей хост-машине,
  включая все необходимые компоненты и зависимости,
  которые будут общими для всех контейнеров.

2 Сохранение образа в файл:
  После создания образа, сохраните его в файл с помощью команды docker save. 

Например:

docker save my-image:latest > my-image.tar

Это создаст файл my-image.tar, содержащий ваш образ Docker.

3 Перенос файла образа на VM1:
  Скопируйте файл my-image.tar на виртуальную машину VM1,
  используя любой удобный для вас способ (например, SCP, SFTP или общую папку).

4 Загрузка образа на VM1:
  На виртуальной машине VM1 загрузите образ Docker из файла my-image.tar 
  с помощью команды docker load:

docker load < my-image.tar

Теперь ваш базовый образ будет доступен на VM1.

5 Создание Dockerfile для контейнеров:
  Создайте Dockerfile для ваших контейнеров, используя базовый образ, 
  который вы только что загрузили на VM1.
  Этот Dockerfile должен содержать инструкции для установки дополнительных компонентов
  или конфигураций, специфичных для каждого контейнера.

6 Создание контейнеров на VM1:
  На виртуальной машине VM1 выполните команду docker build для создания новых образов
  контейнеров на основе вашего Dockerfile.
  Затем используйте команду docker run для создания и запуска контейнеров из этих образов.

При этом подходе, базовый образ, содержащий общие компоненты и зависимости,
будет загружен только один раз на VM1. 
Все контейнеры, созданные из этого базового образа, будут использовать общие слои,
что позволит сэкономить пространство на диске и память.

Дополнительные слои, добавленные в Dockerfile для каждого контейнера,
будут уникальными для этого контейнера и не будут разделяться между другими контейнерами.

Таким образом, вы сможете создавать контейнеры непосредственно в каталоге назначения на VM1,
при этом обеспечивая использование общих слоев образов для экономии ресурсов.



А вот в другой vm2 опять будет некоторое дублирование относительно контейнеров в vm1

Да, вы абсолютно правы.
Если вы создадите контейнеры на другой виртуальной машине VM2,
используя тот же базовый образ, что и на VM1,
то произойдет некоторое дублирование общих слоев образов.

Причина этого заключается в том, что Docker хранит образы и слои
локально на каждой виртуальной машине или хост-системе. 
Даже если вы используете один и тот же базовый образ, 
он будет загружен и сохранен отдельно на каждой виртуальной машине.

Однако, благодаря механизму слоев Docker, общие слои образов все равно будут разделяться
между контейнерами на одной и той же виртуальной машине,
что позволит сэкономить пространство на диске и память.

Чтобы избежать дублирования общих слоев образов между VM1 и VM2,
вы можете использовать один из следующих подходов:

1 Централизованный реестр образов:
  Вместо копирования образов между виртуальными машинами, вы можете использовать
  централизованный реестр образов Docker, такой как Docker Hub или частный реестр.
  Вы загружаете базовый образ в реестр один раз, а затем каждая виртуальная машина может
  загрузить этот образ из реестра, избегая дублирования.

2 Распределенная файловая система:
  Если у вас есть возможность использовать распределенную файловую систему
  (например, NFS, GlusterFS или Ceph), вы можете хранить образы Docker в общем хранилище и
  монтировать его на каждую виртуальную машину.
  Таким образом, общие слои образов будут доступны на всех виртуальных машинах без дублирования.

3 Репликация образов:
  Некоторые системы управления контейнерами, такие как Kubernetes или Docker Swarm,
  предоставляют механизмы репликации образов между узлами кластера.
  Это позволяет избежать дублирования общих слоев образов на разных узлах.

Выбор подхода зависит от вашей инфраструктуры, требований к безопасности и производительности,
а также от масштаба вашей системы.
Использование централизованного реестра образов или распределенной файловой системы 
может быть наиболее простым и эффективным решением 
для избежания дублирования общих слоев образов между виртуальными машинами.
